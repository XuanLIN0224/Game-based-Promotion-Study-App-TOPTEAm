/**
 * This file includes APIs (routes) used for the realization of the "QR Scanning & Reward" feature.
 *
 * Main Functions:
 * F1: Process QR code scans by validating the provided code, rewarding the user with additional score points (+2), saving the updated score, and returning the new total.
 */

const express = require("express");
const auth = require("../middleware/auth");
const QRCode = require("../models/QRcode");

const router = express.Router();

// POST /api/user/scan
router.post("/scan", auth, async (req, res) => {
  try {
    const { code } = req.body;
    if (!code) return res.status(400).json({ message: "No QR code data" });

    // 1) New path: DB-backed QR codes (UUIDs generated by teacher)
    const now = new Date();
    const qr = await QRCode.findOne({ code });
    if (qr) {
      // time window check
      if (now < qr.validFrom || now > qr.validUntil) {
        return res.status(400).json({ message: "QR code not valid at this time" });
      }
      // per-user one-time use
      const already = Array.isArray(qr.usedBy) && qr.usedBy.some((u) => String(u) === String(req.user._id));
      if (already) {
        return res.status(400).json({ message: "Code already used" });
      }

      // mark used + reward
      qr.usedBy = Array.isArray(qr.usedBy) ? qr.usedBy : [];
      qr.usedBy.push(req.user._id);
      await qr.save();

      req.user.score = (req.user.score || 0) + 2;
      await req.user.save();

      return res.json({
        message: "QR scanned, +2 score",
        score: req.user.score,
        code,
        validUntil: qr.validUntil,
      });
    }

    // 2) Legacy path: allow old hardcoded reward codes (for backward compatibility)
    const VALID_CODES = Array.from({ length: 24 }, (_, i) => `reward:QR-${i + 1}`);
    if (!VALID_CODES.includes(code)) {
      return res.status(400).json({ message: "Invalid QR code" });
    }

    // prevent re-use for legacy path (store on user)
    req.user.scannedCodes = Array.isArray(req.user.scannedCodes) ? req.user.scannedCodes : [];
    if (req.user.scannedCodes.includes(code)) {
      return res.status(400).json({ message: "Code already used" });
    }

    req.user.score = (req.user.score || 0) + 2;
    req.user.scannedCodes.push(code);
    await req.user.save();

    res.json({
      message: "QR scanned, +2 score",
      score: req.user.score,
      code,
    });
  } catch (err) {
    console.error("POST /api/user/scan error", err);
    res.status(500).json({ message: "Server error" });
  }
});

module.exports = router;
